% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/detection_process.R
\name{detection_process}
\alias{detection_process}
\title{Detection process on spatial point process}
\usage{
detection_process(
  pts,
  transects,
  strip_transect = TRUE,
  sigma = NULL,
  seg_id_col = NULL,
  virtual_space = TRUE
)
}
\arguments{
\item{pts}{sf object (points), the position of individuals to be surveyed}

\item{transects}{sf object (lines), survey layout with transects or segments}

\item{strip_transect}{Boolean. Should strip-transect methodology be used? Default to TRUE}

\item{sigma}{numeric, is strip_transect is TRUE, the width of the strip width; if strip-transect is FALSE, the effective strip half-width (in km, if in real space)}

\item{seg_id_col}{character, the name of the column in transects where the ids are stored}

\item{virtual_space}{Boolean. Is the survey done in a virtual space? Default to TRUE.}
}
\value{
the pts dataframe (sf object) with additional columns: distance, distance_km (if in real space), seg_id (the closest transect or segment from the individual) and detected (1 if the individual is detected, 0 otherwise)
}
\description{
This function can be used to simulate the detection process when the surveyed individuals are fixed on the geographical space, for example when the species distribution is generated by \code{\link{simul_spat}}. If strip_transect is emulated, an individual is considered detected if its distance to the track line is lower than the width (provided with sigma). If line-transect is emulated, a half-normal detection function is built using the given sigma as effective strip half-width. The user must define if the simulation is done in a virtual space or not (if not, the distances must be provided in km and pts and transects objects must be projected).
}
\examples{
grid <- create_grid()
env <- generate_env_layer(grid = grid)
sp <- simul_spat(ref_map = env$rasters$sim1,N = 1000, n_sim = 1, return_wgs_coordinates = F)
surv <- generate_survey_plan(bbx_xmin = 5, bbx_xmax = 85, bbx_ymin = 5, bbx_ymax = 85,
                             start_x = 10, end_x = 80, start_y = 10, end_y = 80,
                             space_out_factor = 4, segmentize = TRUE, seg_length = 2, 
                             buffer = TRUE, buffer_width = 0.2
                             )

pts <- detection_process(pts = sp, 
                         transects = surv$segments, 
                         strip_transect = TRUE, 
                         sigma = 0.2, 
                         virtual_space = TRUE,
                         seg_id_col = "seg_id")
plot(sp$x, sp$y)
# plot(sf::st_geometry(surv$buffered.segments), border = "pink", color = NA, add = T)
plot(sf::st_geometry(surv$segments), col = "red", add = T)
points(sf::st_drop_geometry(pts[which(pts$detected == 1), c("x", "y")]), pch = 20, col = "blue")
}
