[{"path":"/articles/simulate-individual-movements.html","id":"define-potential-next-positions","dir":"Articles","previous_headings":"","what":"Define potential next positions","title":"Simulate individual movements","text":"Generating bunch potential positions chose next step . Positions generated based provided bearing (Von Mises distribution) step distributions (gamma distribution). positions, value env_rast retrieved well distance colony location.","code":"from <- data.frame(Lon = 1, Lat = 2, toto = 5) colony.location <- data.frame(Lon = 2, Lat = 5) cdt <- generate_env_layer(grid = create_grid(), n = 1)$rasters #> [using unconditional Gaussian simulation] potential_position_func(n = 10, from = from,                          colony.location = colony.location, resource.layer = cdt,                          bearing = c(90,10), step = c(4.5, 3)) #>        angle      step        Lon       Lat       env dist.col #> 1  124.54851 1.3176841  1.5797831 0.8167237 0.5953956 4.204329 #> 2   38.59724 1.5516632  1.9668066 3.2136489 0.5617013 1.786659 #> 3  317.19460 1.2513320 -0.2442748 2.1327102 0.6177086 3.641170 #> 4  185.32546 0.7604406  0.2398684 2.0216779 0.6177086 3.459547 #> 5   57.06428 0.5626446  1.4894966 2.2774203 0.5421687 2.770028 #> 6  208.31050 0.9354868  1.5323879 2.7692196 0.5329111 2.279264 #> 7  190.77661 3.2482543 -1.1179400 4.4628207        NA 3.163876 #> 8  180.25368 1.2824369  0.5149331 0.8128377 0.6540339 4.442719 #> 9   22.63236 0.2880789  0.7691424 1.8276799 0.5297848 3.402738 #> 10 111.86924 0.8619650  1.2896450 1.1881568 0.5953956 3.877467 #>    potential.position.id #> 1                      1 #> 2                      2 #> 3                      3 #> 4                      4 #> 5                      5 #> 6                      6 #> 7                      7 #> 8                      8 #> 9                      9 #> 10                    10"},{"path":"/articles/simulate-individual-movements.html","id":"simulate-the-trajectory-of-a-single-central-place-forager","dir":"Articles","previous_headings":"","what":"Simulate the trajectory of a single central-place forager","title":"Simulate individual movements","text":"Simulate full foraging trajectory individual departing colony. individual launches trip given time period (starting.hour, ymd_hms format) starts returning trip either given distance colony (provided max.dist) hour sunset. user can define bearing step distributions departing step, also travelling foraging bouts. default, travelling set directed movement patterns (large steps low variability, low angles low variability) foraging area-restricted movements (short steps low variability, large angles large variability). user can define step duration, time interval positions sampled. position, ten potential subsequent positions randomly sampled using potential_position_func(), movement parameters based activity individual engaged previous step (travelling foraging). environmental suitability (raster layer provided resource.layer) retrieved potential point based geographic coordinates, distance colony computed using rdist function fields package. first four positions track colony departure randomly selected within ten potential points sampled described , using travelling movement. Afterwards, subsequent positions randomly sampled among four ten potential points highest values environmental suitability. environmental suitability exceeds given threshold (activity.threshold), individual switches foraging movements; , individual continues travelling. individuals reaches threshold distance colony (max.dist), trip duration exceeds given duration (max.duration), start homeward journey. Potential next positions sampled using travelling movement parameters, next positions selected based minimum distance colony. several potential positions meet selection criteria, next step randomly sampled within positions. individual considered back within 0.5 spatial unit (unit depends provided resource layer) colony.","code":"library(ggplot2) library(viridis) #> Loading required package: viridisLite library(tidyterra) #>  #> Attaching package: 'tidyterra' #> The following object is masked from 'package:stats': #>  #>     filter library(lubridate) #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union library(terra) #> terra 1.7.18 colony.location <- data.frame(Lon = 20, Lat = 20) cdt <- generate_env_layer(grid = create_grid(), n = 1, seed = 25) #> [using unconditional Gaussian simulation] daylength <- insol::daylength(long = colony.location$Lon,                                lat = colony.location$Lat,                                jd = insol::JD(as.POSIXct(\"2022-08-01\", tz = \"UTC\")), tmz = 0) sunrise <- format(as.POSIXct(daylength[,1]*3600,                               origin = as.POSIXct(\"2022-08-01\", tz = \"UTC\"), \"%H:%M\", tz = \"UTC\"))      # launch a travel for a duration of 12h single.traj <- simulate_trajectory_CPF(initial.position = colony.location,                      resource.layer = cdt$rasters,                      starting.hour = ymd_hms(sunrise), # departs at sunrise                     starting.bearing = c(90,10),                      starting.step = c(4.5, 3),                     travel.bearing = c(0, 20),                      travel.step = c(3, 3),                      foraging.bearing = c(0, 0.5),                      foraging.step = c(1, 3),                     minx = 0, maxx = 90,                      miny = 0, maxy = 90,                     max.dist = 40,                     step.duration = 5,                     activity.threshold = 0.70,                     max.duration = 720)  # view the trajectory ggplot(single.traj) +   geom_spatraster(data = cdt$rasters) +    geom_point(aes(x = Lon, y = Lat, color = activity)) +   geom_point(data = colony.location, aes(x = Lon, y = Lat), col = \"red\") +   scale_fill_viridis(option = \"H\") # look at the density distribution of distance to colony and movement parameters ggplot(single.traj) + geom_density(aes(x = dist.col)) ggplot(single.traj |> subset(activity %in% c(\"forage\", \"travel\"))) + geom_density(aes(x = angle)) + facet_wrap(\"activity\") ggplot(single.traj |> subset(activity %in% c(\"forage\", \"travel\"))) + geom_density(aes(x = step)) + facet_wrap(\"activity\")"},{"path":"/articles/simulate-individual-movements.html","id":"simulate-the-trajectory-of-a-non-central-place-forager","dir":"Articles","previous_headings":"","what":"Simulate the trajectory of a non-central place forager","title":"Simulate individual movements","text":", individual restrained around colony perform homing bout. add condition time spent around area.","code":"library(ggplot2) library(viridis) library(tidyterra) library(lubridate) colony.location <- data.frame(Lon = 50, Lat = 50) cdt <- generate_env_layer(grid = create_grid(), n = 1, seed = 4) #> [using unconditional Gaussian simulation] terra::plot(cdt$rasters) # determine the sunrise hour for a random dat daylength <- insol::daylength(long = colony.location$Lon,                                lat = colony.location$Lat,                                jd = insol::JD(as.POSIXct(\"2022-08-01\", tz = \"UTC\")), tmz = 0) sunrise <- format(as.POSIXct(daylength[,1]*3600,                               origin = as.POSIXct(\"2022-08-01\", tz = \"UTC\"), \"%H:%M\", tz = \"UTC\"))      single.traj <- simulate_trajectory_FR(initial.position = colony.location,                      resource.layer = cdt$rasters,                      starting.hour = ymd_hms(sunrise), # departs at sunrise                     starting.bearing = c(90,10),                      starting.step = c(4.5, 3),                     travel.bearing = c(0, 20),                      travel.step = c(3, 3),                      foraging.bearing = c(0, 0.5),                      foraging.step = c(1, 3),                     minx = 0, maxx = 90,                      miny = 0, maxy = 90,                     step.duration = 1,                     activity.threshold = 0.7,                     max.duration = 2000)  # view the trajectory ggplot(single.traj) +   geom_spatraster(data = cdt$rasters) +    geom_point(aes(x = Lon, y = Lat, color = activity)) +   geom_point(data = colony.location, aes(x = Lon, y = Lat), col = \"red\") +   scale_fill_viridis(option = \"H\") # look at the density distribution of distance to colony and movement parameters ggplot(single.traj) + geom_density(aes(x = dist.col)) ggplot(single.traj |> subset(activity %in% c(\"forage\", \"travel\"))) + geom_density(aes(x = angle)) + facet_wrap(\"activity\") ggplot(single.traj |> subset(activity %in% c(\"forage\", \"travel\"))) + geom_density(aes(x = step)) + facet_wrap(\"activity\")"},{"path":"/articles/simulate-virtual-environment.html","id":"create-the-grid","dir":"Articles","previous_headings":"","what":"Create the grid","title":"Simulate virtual environment","text":"Create grid structuring virtual environment. default, function creates grid spanning 0 90° longitude latitude, steps 0.5.","code":"grid <- create_grid()"},{"path":"/articles/simulate-virtual-environment.html","id":"generating-environmental-layers","dir":"Articles","previous_headings":"","what":"Generating environmental layers","title":"Simulate virtual environment","text":"function creates several environmental layers using Gaussian simulation grid locations. number layers generated set n. generated layers can normalised, returned either data frame data frame raster formats (SpatRast).","code":"grid <- create_grid()  str(generate_env_layer(norm = FALSE, return.rasters = FALSE, grid = grid)) #> [using unconditional Gaussian simulation] #> 'data.frame':    32761 obs. of  4 variables: #>  $ x   : num  0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>  $ y   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ sim1: num  4.71 5.35 4.81 7.42 6.74 ... #>  $ sim2: num  -0.377 -0.575 -0.766 -3.876 -4.276 ... str(generate_env_layer(norm = TRUE, return.rasters = FALSE, grid = grid)) #> [using unconditional Gaussian simulation] #> 'data.frame':    32761 obs. of  4 variables: #>  $ x   : num  0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>  $ y   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ sim1: num  0.213 0.234 0.217 0.301 0.279 ... #>  $ sim2: num  0.455 0.45 0.445 0.367 0.357 ...  library(terra) #> terra 1.7.18 plot(generate_env_layer(norm = TRUE, return.rasters = TRUE, grid = grid)$rasters) #> [using unconditional Gaussian simulation] plot(generate_env_layer(norm = FALSE, return.rasters = TRUE, grid = grid)$rasters) #> [using unconditional Gaussian simulation]"},{"path":"/articles/simulate-virtual-environment.html","id":"build-the-suitability-layer","dir":"Articles","previous_headings":"","what":"Build the suitability layer","title":"Simulate virtual environment","text":"function permits building suitability layer set environmental layers beta parameters leveraged . mimics basic resource selection function, given environmental layer simply scaled beta parameter (env*beta) several leveraged env layers additively combined. elaborate procedures, see package virtualspecies.","code":"library(terra) # simple example grid <- create_grid() cdt <- generate_env_layer(grid = grid) #> [using unconditional Gaussian simulation] rsce <- generate_resource_layer(env_layers = cdt$rasters,                             beta = c(2, -1.5)) str(rsce) #> List of 2 #>  $ dataframe:'data.frame':   32761 obs. of  3 variables: #>   ..$ x          : num [1:32761] 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>   ..$ y          : num [1:32761] 90 90 90 90 90 90 90 90 90 90 ... #>   ..$ suitability: num [1:32761] 0.566 0.546 0.56 0.554 0.527 ... #>  $ rasters  :S4 class 'SpatRaster' [package \"terra\"] plot(rsce$rasters) # also works when coordinates are not names x,y cdt2 <- generate_env_layer(grid = grid, n = 3)$dataframe |> dplyr::rename(lon = x, lat = y) #> [using unconditional Gaussian simulation] str(generate_resource_layer(env_layers = cdt2, coordinate_fields = c(\"lon\", \"lat\"),                             beta = c(2, -1.5, 3)) ) #> List of 2 #>  $ dataframe:'data.frame':   32761 obs. of  3 variables: #>   ..$ lon        : num [1:32761] 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>   ..$ lat        : num [1:32761] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ suitability: num [1:32761] 0.389 0.346 0.37 0.328 0.324 ... #>  $ rasters  :S4 class 'SpatRaster' [package \"terra\"]"},{"path":"/articles/simulate-virtual-species.html","id":"create-a-custom-projection","dir":"Articles","previous_headings":"","what":"Create a custom projection","title":"Simulate virtual species","text":"upcoming analyses necessitates working projected environment. virtual environment, must define custom projection. custom_proj().","code":"custom_proj() #> Coordinate Reference System: #>   User input: PROJCS[\"Ad_hoc_handy_wkt2_template_for_laea\", #> GEOGCS[\"WGS 84\", #>     DATUM[\"WGS_1984\", #>         SPHEROID[\"WGS 84\",6378137,298.257223563]], #>     PRIMEM[\"Greenwich\",0], #>     UNIT[\"Degree\",0.0174532925199433]], #> PROJECTION[\"Lambert_Azimuthal_Equal_Area\"], #> PARAMETER[\"latitude_of_center\",0], #> PARAMETER[\"longitude_of_center\",0], #> PARAMETER[\"false_easting\",0], #> PARAMETER[\"false_northing\",0], #> UNIT[\"metre\",1]]  #>   wkt: #> PROJCRS[\"Ad_hoc_handy_wkt2_template_for_laea\", #>     BASEGEOGCRS[\"WGS 84\", #>         DATUM[\"World Geodetic System 1984\", #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1, #>                     ID[\"EPSG\",9001]]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433]]], #>     CONVERSION[\"unnamed\", #>         METHOD[\"Lambert Azimuthal Equal Area\", #>             ID[\"EPSG\",9820]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"False easting\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]]]"},{"path":"/articles/simulate-virtual-species.html","id":"simulate-spatial-point-process","dir":"Articles","previous_headings":"","what":"Simulate spatial point process","title":"Simulate virtual species","text":"Generates spatial point process reference map, using Inhomogeneous Poisson Point Process spatstat’s IPP. intensity process proportional reference map, final number individuals population provided N. Several runs can simulated time. : add id generated obs (done n_sim = 1)","code":"grid <- create_grid() cdt <- generate_env_layer(grid = grid) #> [using unconditional Gaussian simulation] rsce <- generate_resource_layer(env_layers = cdt$rasters,                             beta = c(2, -1.5))  # issue a warning: we are in a virtual env and ref_map has no crs out <- simul_spat(ref_map = rsce$rasters, n_sim = 2,                    return_wgs_coordinates = FALSE, N = 1000, mean_group_size = 10) #> Warning in simul_spat(ref_map = rsce$rasters, n_sim = 2, return_wgs_coordinates #> = FALSE, : ref_map has no crs, is that voluntary? The output will have no crs.  ggplot2::ggplot(out) +   ggplot2::geom_tile(data = rsce$dataframe, ggplot2::aes(x = x, y = y, fill = suitability)) +    ggplot2::geom_sf() + ggplot2::facet_wrap(\"name\") +   viridis::scale_fill_viridis(option = \"H\") ggplot2::ggplot(out) +    ggplot2::geom_sf(ggplot2::aes(size = size)) + ggplot2::facet_wrap(\"name\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charlotte Lambert. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lambert C (2023). simtools: Tools Simulation Analyses. R package version 0.0.0.9000.","code":"@Manual{,   title = {simtools: Tools For Simulation Analyses},   author = {Charlotte Lambert},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement charlotte.lambert@univ-lr.fr. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/index.html","id":"simtools","dir":"","previous_headings":"","what":"Tools For Simulation Analyses","title":"Tools For Simulation Analyses","text":"simtools provide facilities simulate virtual ecosystems, underlying environment species sientific surveys. Species can simulated spatial point process using resource layer reference, simulating individual movements. articles detail step: Simulate virtual environment Simulate species spatial point process Simulate species individual movement Simulate observation survey","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools For Simulation Analyses","text":"can install development version simtools folowing:","code":"# FILL THIS IN! HOW CAN PEOPLE INSTALL YOUR DEV PACKAGE?"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Tools For Simulation Analyses","text":"Please note simtools project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Charlotte Lambert Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/create_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the grid of a virtual environment — create_grid","title":"Create the grid of a virtual environment — create_grid","text":"Create grid virtual environment","code":""},{"path":"/reference/create_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the grid of a virtual environment — create_grid","text":"","code":"create_grid(   ymin = 0,   ymax = 90,   xmin = 0,   xmax = 90,   step.x = 0.5,   step.y = 0.5 )"},{"path":"/reference/create_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the grid of a virtual environment — create_grid","text":"ymin Minimum latitude (default 0) ymax Maximum latitude (default 90) xmin Minimum longitude (default 0) xmax Maximum latitude (default 90) step.x Longitude steps used generate points (default 0.5) step.y Latitude steps used generate points (default 0.5)","code":""},{"path":"/reference/create_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the grid of a virtual environment — create_grid","text":"grid dataframe format.","code":""},{"path":"/reference/create_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the grid of a virtual environment — create_grid","text":"","code":"grid <- create_grid()"},{"path":"/reference/custom_proj.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up a custom projection for virtual environment — custom_proj","title":"Set up a custom projection for virtual environment — custom_proj","text":"Set custom projection virtual environment","code":""},{"path":"/reference/custom_proj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up a custom projection for virtual environment — custom_proj","text":"","code":"custom_proj(lon_0 = 0, lat_0 = 0, x_0 = 0, y_0 = 0)"},{"path":"/reference/custom_proj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up a custom projection for virtual environment — custom_proj","text":"lon_0, lat_0 Longitude Latitude center, defaults 0 x_0, y_0 False easting northing, defaults 0","code":""},{"path":"/reference/custom_proj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up a custom projection for virtual environment — custom_proj","text":"object class crs","code":""},{"path":"/reference/custom_proj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up a custom projection for virtual environment — custom_proj","text":"","code":"custom_proj() #> Coordinate Reference System: #>   User input: PROJCS[\"Ad_hoc_handy_wkt2_template_for_laea\", #> GEOGCS[\"WGS 84\", #>     DATUM[\"WGS_1984\", #>         SPHEROID[\"WGS 84\",6378137,298.257223563]], #>     PRIMEM[\"Greenwich\",0], #>     UNIT[\"Degree\",0.0174532925199433]], #> PROJECTION[\"Lambert_Azimuthal_Equal_Area\"], #> PARAMETER[\"latitude_of_center\",0], #> PARAMETER[\"longitude_of_center\",0], #> PARAMETER[\"false_easting\",0], #> PARAMETER[\"false_northing\",0], #> UNIT[\"metre\",1]]  #>   wkt: #> PROJCRS[\"Ad_hoc_handy_wkt2_template_for_laea\", #>     BASEGEOGCRS[\"WGS 84\", #>         DATUM[\"World Geodetic System 1984\", #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1, #>                     ID[\"EPSG\",9001]]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433]]], #>     CONVERSION[\"unnamed\", #>         METHOD[\"Lambert Azimuthal Equal Area\", #>             ID[\"EPSG\",9820]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"False easting\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]]]"},{"path":"/reference/generate_env_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random environmental layers — generate_env_layer","title":"Generating random environmental layers — generate_env_layer","text":"Generating random environmental layers","code":""},{"path":"/reference/generate_env_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating random environmental layers — generate_env_layer","text":"","code":"generate_env_layer(   seed = 2,   grid,   n = 2,   beta = 1,   norm = TRUE,   return.rasters = TRUE )"},{"path":"/reference/generate_env_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random environmental layers — generate_env_layer","text":"seed Value feed set.seed (default 2) grid Grid virtual space, generated create_grid() n Number layers generated (default 2) beta beta value forwarded gstat (default 1) norm resulting layers normalized? return.rasters function returns SpatRast addition data frame?","code":""},{"path":"/reference/generate_env_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random environmental layers — generate_env_layer","text":"Returns data frame simulated environmental values, well SpatRast return.rasters = TRUE","code":""},{"path":"/reference/generate_env_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random environmental layers — generate_env_layer","text":"","code":"grid <- create_grid()  str(generate_env_layer(norm = FALSE, return.rasters = FALSE, grid = grid)) #> [using unconditional Gaussian simulation] #> 'data.frame':\t32761 obs. of  4 variables: #>  $ x   : num  0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>  $ y   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ sim1: num  4.71 5.35 4.81 7.42 6.74 ... #>  $ sim2: num  -0.377 -0.575 -0.766 -3.876 -4.276 ... str(generate_env_layer(norm = TRUE, return.rasters = FALSE, grid = grid)) #> [using unconditional Gaussian simulation] #> 'data.frame':\t32761 obs. of  4 variables: #>  $ x   : num  0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>  $ y   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ sim1: num  0.213 0.234 0.217 0.301 0.279 ... #>  $ sim2: num  0.455 0.45 0.445 0.367 0.357 ...  library(terra) #> terra 1.7.18 plot(generate_env_layer(norm = TRUE, return.rasters = TRUE, grid = grid)$rasters) #> [using unconditional Gaussian simulation]  plot(generate_env_layer(norm = FALSE, return.rasters = TRUE, grid = grid)$rasters) #> [using unconditional Gaussian simulation]"},{"path":"/reference/generate_resource_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Resource selection function — generate_resource_layer","title":"Resource selection function — generate_resource_layer","text":"Resource selection function","code":""},{"path":"/reference/generate_resource_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resource selection function — generate_resource_layer","text":"","code":"generate_resource_layer(   beta,   env_layers,   coordinate_fields = c(\"x\", \"y\"),   norm = TRUE,   return.rasters = TRUE )"},{"path":"/reference/generate_resource_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resource selection function — generate_resource_layer","text":"beta beta values multiply environmental layers (must much beta layers) env_layers Environmental layers build resource . Can either data frame (including map coordinates environmental layer values) SpatRast. coordinate_fields env_layers data frame, fields corresponding map coordinates (e.g. c(\"x\", \"y\"), default) norm resource layer normalized? return.rasters function returns resource SpatRast addition data frame?","code":""},{"path":"/reference/generate_resource_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resource selection function — generate_resource_layer","text":"Returns data frame suitability layer, well SpatRast return.rasters = TRUE","code":""},{"path":"/reference/generate_resource_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resource selection function — generate_resource_layer","text":"","code":"library(terra) # simple example grid <- create_grid() cdt <- generate_env_layer(grid = grid) #> [using unconditional Gaussian simulation] rsce <- generate_resource_layer(env_layers = cdt$rasters,                             beta = c(2, -1.5)) str(rsce) #> List of 2 #>  $ dataframe:'data.frame':\t32761 obs. of  3 variables: #>   ..$ x          : num [1:32761] 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>   ..$ y          : num [1:32761] 90 90 90 90 90 90 90 90 90 90 ... #>   ..$ suitability: num [1:32761] 0.566 0.546 0.56 0.554 0.527 ... #>  $ rasters  :S4 class 'SpatRaster' [package \"terra\"] plot(rsce$rasters)   # also works when coordinates are not names x,y cdt2 <- generate_env_layer(grid = grid, n = 3)$dataframe |> dplyr::rename(lon = x, lat = y) #> [using unconditional Gaussian simulation] str(generate_resource_layer(env_layers = cdt2, coordinate_fields = c(\"lon\", \"lat\"),                             beta = c(2, -1.5, 3)) ) #> List of 2 #>  $ dataframe:'data.frame':\t32761 obs. of  3 variables: #>   ..$ lon        : num [1:32761] 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>   ..$ lat        : num [1:32761] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ suitability: num [1:32761] 0.389 0.346 0.37 0.328 0.324 ... #>  $ rasters  :S4 class 'SpatRaster' [package \"terra\"]"},{"path":[]},{"path":"/reference/grapes-not-in-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Not in — %!in%","text":"","code":"x %!in% y"},{"path":"/reference/grapes-not-in-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Not in — %!in%","text":"x, y Numeric vectors","code":""},{"path":"/reference/grapes-not-in-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Not in — %!in%","text":"Boolean","code":""},{"path":"/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize a vector — normalize","title":"Normalize a vector — normalize","text":"Normalize vector","code":""},{"path":"/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize a vector — normalize","text":"","code":"normalize(cov)"},{"path":"/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize a vector — normalize","text":"cov vector","code":""},{"path":"/reference/normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize a vector — normalize","text":"vector","code":""},{"path":"/reference/potential_position_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify potential next positions — potential_position_func","title":"Identify potential next positions — potential_position_func","text":"Identify potential next positions","code":""},{"path":"/reference/potential_position_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify potential next positions — potential_position_func","text":"","code":"potential_position_func(   n,   bearing,   step,   from,   colony.location,   resource.layer )"},{"path":"/reference/potential_position_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify potential next positions — potential_position_func","text":"n Numeric, number potential positions generate bearing Numeric vector, mu kappa passed randomdir step Numeric, shape rate passed randomdist data.frame including Lon Lat fields stepID point origin colony.location data.frame vector lon lat position colony resource.layer SpatRaster, suitability resource layer used sort potential position (single layer)","code":""},{"path":"/reference/potential_position_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify potential next positions — potential_position_func","text":"data.frame n potential positions point origin, informed value provided environmental layer corresponding well distance colony.","code":""},{"path":"/reference/potential_position_func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify potential next positions — potential_position_func","text":"","code":"from <- data.frame(Lon = 1, Lat = 2, toto = 5) colony.location <- data.frame(Lon = 2, Lat = 5) cdt <- generate_env_layer(grid = create_grid(), n = 1)$rasters #> [using unconditional Gaussian simulation] potential_position_func(n = 10, from = from,                          colony.location = colony.location, resource.layer = cdt,                          bearing = c(90,10), step = c(4.5, 3)) #>        angle      step        Lon       Lat       env dist.col #> 1  124.54851 1.3176841  1.5797831 0.8167237 0.5953956 4.204329 #> 2   38.59724 1.5516632  1.9668066 3.2136489 0.5617013 1.786659 #> 3  317.19460 1.2513320 -0.2442748 2.1327102 0.6177086 3.641170 #> 4  185.32546 0.7604406  0.2398684 2.0216779 0.6177086 3.459547 #> 5   57.06428 0.5626446  1.4894966 2.2774203 0.5421687 2.770028 #> 6  208.31050 0.9354868  1.5323879 2.7692196 0.5329111 2.279264 #> 7  190.77661 3.2482543 -1.1179400 4.4628207        NA 3.163876 #> 8  180.25368 1.2824369  0.5149331 0.8128377 0.6540339 4.442719 #> 9   22.63236 0.2880789  0.7691424 1.8276799 0.5297848 3.402738 #> 10 111.86924 0.8619650  1.2896450 1.1881568 0.5953956 3.877467 #>    potential.position.id #> 1                      1 #> 2                      2 #> 3                      3 #> 4                      4 #> 5                      5 #> 6                      6 #> 7                      7 #> 8                      8 #> 9                      9 #> 10                    10"},{"path":"/reference/randomdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Return random direction angles — randomdir","title":"Return random direction angles — randomdir","text":"Return random direction angles","code":""},{"path":"/reference/randomdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return random direction angles — randomdir","text":"","code":"randomdir(n, mu, kappa)"},{"path":"/reference/randomdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return random direction angles — randomdir","text":"n number observations. mu mean direction distribution circular object.","code":""},{"path":"/reference/randomdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Return random step lengths — randomdist","title":"Return random step lengths — randomdist","text":"Return random step lengths","code":""},{"path":"/reference/randomdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return random step lengths — randomdist","text":"","code":"randomdist(n, shape, rate)"},{"path":"/reference/randomdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return random step lengths — randomdist","text":"n number observations. length(n) > 1, length     taken number required. rate alternative way specify scale.","code":""},{"path":"/reference/simtools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"simtools: Tools For Simulation Analyses — simtools-package","title":"simtools: Tools For Simulation Analyses — simtools-package","text":"Includes suite tools simulate virtual ecological systems, environment, animals surveys.","code":""},{"path":"/reference/simtools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"simtools: Tools For Simulation Analyses — simtools-package","text":"Maintainer: Charlotte Lambert charlotte.lambert@univ-lr.fr (ORCID)","code":""},{"path":"/reference/simulate_trajectory_CPF.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate individual trajectory — simulate_trajectory_CPF","title":"Simulate individual trajectory — simulate_trajectory_CPF","text":"Simulate individual trajectory","code":""},{"path":"/reference/simulate_trajectory_CPF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate individual trajectory — simulate_trajectory_CPF","text":"","code":"simulate_trajectory_CPF(   initial.position,   resource.layer,   starting.hour,   starting.bearing = c(90, 10),   starting.step = c(4.5, 3),   travel.bearing = c(0, 20),   travel.step = c(3, 3),   foraging.bearing = c(0, 0.5),   foraging.step = c(1, 3),   minx = 0,   maxx = 90,   miny = 0,   maxy = 90,   max.dist = 40,   step.duration = 1,   activity.threshold = 0.5,   max.duration = 720 )"},{"path":"/reference/simulate_trajectory_CPF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate individual trajectory — simulate_trajectory_CPF","text":"initial.position data.frame containing coordinates point individual starts (Lon, Lat fields), considered colony location resource.layer SpatRaster resource layer starting.hour Starting hour starting.bearing Bearing departing colony (mu, kappa) starting.step Step length departing colony (mu, kappa) travel.bearing Bearing previous step traveling (mu, kappa) travel.step Distance previous step traveling (scale, rate) foraging.bearing Bearing previous step foraging/searching (mu, kappa) foraging.step Distance previous step foraging (scale, rate) minx Minimum longitude bounding box simulate trajectory within maxx Maximum longitude bounding box simulate trajectory within miny Minimum latitude bounding box simulate trajectory within maxy Maximum latitude bounding box simulate trajectory within max.dist Distance threshold value individual starts homing bout step.duration Duration step length, minutes (defaults 1), defines sampling interval activity.threshold Threshold environmental value defining individual switches travelling foraging movement max.duration Total duration full trip, minutes (defaults 720, 12h)","code":""},{"path":"/reference/simulate_trajectory_CPF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate individual trajectory — simulate_trajectory_CPF","text":"data.frame","code":""},{"path":"/reference/simulate_trajectory_CPF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate individual trajectory — simulate_trajectory_CPF","text":"","code":"library(ggplot2) library(viridis) #> Loading required package: viridisLite library(tidyterra) #>  #> Attaching package: 'tidyterra' #> The following object is masked from 'package:stats': #>  #>     filter library(lubridate) #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:terra': #>  #>     intersect, union #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union library(terra) colony.location <- data.frame(Lon = 20, Lat = 20) cdt <- generate_env_layer(grid = create_grid(), n = 1, seed = 25) #> [using unconditional Gaussian simulation] daylength <- insol::daylength(long = colony.location$Lon,                                lat = colony.location$Lat,                                jd = insol::JD(as.POSIXct(\"2022-08-01\", tz = \"UTC\")), tmz = 0) sunrise <- format(as.POSIXct(daylength[,1]*3600,                               origin = as.POSIXct(\"2022-08-01\", tz = \"UTC\"), \"%H:%M\", tz = \"UTC\"))      # launch a travel for a duration of 12h single.traj <- simulate_trajectory_CPF(initial.position = colony.location,                      resource.layer = cdt$rasters,                      starting.hour = ymd_hms(sunrise), # departs at sunrise                     starting.bearing = c(90,10),                      starting.step = c(4.5, 3),                     travel.bearing = c(0, 20),                      travel.step = c(3, 3),                      foraging.bearing = c(0, 0.5),                      foraging.step = c(1, 3),                     minx = 0, maxx = 90,                      miny = 0, maxy = 90,                     max.dist = 40,                     step.duration = 5,                     activity.threshold = 0.70,                     max.duration = 720)  # view the trajectory ggplot(single.traj) +   geom_spatraster(data = cdt$rasters) +    geom_point(aes(x = Lon, y = Lat, color = activity)) +   geom_point(data = colony.location, aes(x = Lon, y = Lat), col = \"red\") +   scale_fill_viridis(option = \"H\")    # look at the density distribution of distance to colony and movement parameters ggplot(single.traj) + geom_density(aes(x = dist.col))  ggplot(single.traj |> subset(activity %in% c(\"forage\", \"travel\"))) + geom_density(aes(x = angle)) + facet_wrap(\"activity\")  ggplot(single.traj |> subset(activity %in% c(\"forage\", \"travel\"))) + geom_density(aes(x = step)) + facet_wrap(\"activity\")"},{"path":"/reference/simulate_trajectory_FR.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate individual trajectory — simulate_trajectory_FR","title":"Simulate individual trajectory — simulate_trajectory_FR","text":"Simulate individual trajectory","code":""},{"path":"/reference/simulate_trajectory_FR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate individual trajectory — simulate_trajectory_FR","text":"","code":"simulate_trajectory_FR(   initial.position,   resource.layer,   starting.hour,   starting.bearing = c(90, 10),   starting.step = c(4.5, 3),   travel.bearing = c(0, 20),   travel.step = c(3, 3),   foraging.bearing = c(0, 0.5),   foraging.step = c(1, 3),   minx = 0,   maxx = 90,   miny = 0,   maxy = 90,   step.duration = 1,   activity.threshold = 0.5,   max.duration = 720 )"},{"path":"/reference/simulate_trajectory_FR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate individual trajectory — simulate_trajectory_FR","text":"initial.position data.frame containing coordinates point individual starts (Lon, Lat fields) resource.layer SpatRaster resource layer starting.hour Starting hour starting.bearing Bearing departing colony (mu, kappa) starting.step Step length departing colony (mu, kappa) travel.bearing Bearing previous step traveling (mu, kappa) travel.step Distance previous step traveling (scale, rate) foraging.bearing Bearing previous step foraging/searching (mu, kappa) foraging.step Distance previous step foraging (scale, rate) minx Minimum longitude bounding box simulate trajectory within maxx Maximum longitude bounding box simulate trajectory within miny Minimum latitude bounding box simulate trajectory within maxy Maximum latitude bounding box simulate trajectory within step.duration Duration step length, minutes (defaults 1), defines sampling interval activity.threshold Threshold environmental value defining individual switches travelling foraging movement max.duration Total duration full trip, minutes (defaults 720, 12h)","code":""},{"path":"/reference/simulate_trajectory_FR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate individual trajectory — simulate_trajectory_FR","text":"data.frame","code":""},{"path":"/reference/simulate_trajectory_FR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate individual trajectory — simulate_trajectory_FR","text":"","code":"library(ggplot2) library(viridis) library(tidyterra) library(lubridate) colony.location <- data.frame(Lon = 50, Lat = 50) cdt <- generate_env_layer(grid = create_grid(), n = 1, seed = 4) #> [using unconditional Gaussian simulation] terra::plot(cdt$rasters)  # determine the sunrise hour for a random dat daylength <- insol::daylength(long = colony.location$Lon,                                lat = colony.location$Lat,                                jd = insol::JD(as.POSIXct(\"2022-08-01\", tz = \"UTC\")), tmz = 0) sunrise <- format(as.POSIXct(daylength[,1]*3600,                               origin = as.POSIXct(\"2022-08-01\", tz = \"UTC\"), \"%H:%M\", tz = \"UTC\"))      single.traj <- simulate_trajectory_FR(initial.position = colony.location,                      resource.layer = cdt$rasters,                      starting.hour = ymd_hms(sunrise), # departs at sunrise                     starting.bearing = c(90,10),                      starting.step = c(4.5, 3),                     travel.bearing = c(0, 20),                      travel.step = c(3, 3),                      foraging.bearing = c(0, 0.5),                      foraging.step = c(1, 3),                     minx = 0, maxx = 90,                      miny = 0, maxy = 90,                     step.duration = 1,                     activity.threshold = 0.7,                     max.duration = 2000)  # view the trajectory ggplot(single.traj) +   geom_spatraster(data = cdt$rasters) +    geom_point(aes(x = Lon, y = Lat, color = activity)) +   geom_point(data = colony.location, aes(x = Lon, y = Lat), col = \"red\") +   scale_fill_viridis(option = \"H\")    # look at the density distribution of distance to colony and movement parameters ggplot(single.traj) + geom_density(aes(x = dist.col))  ggplot(single.traj |> subset(activity %in% c(\"forage\", \"travel\"))) + geom_density(aes(x = angle)) + facet_wrap(\"activity\")  ggplot(single.traj |> subset(activity %in% c(\"forage\", \"travel\"))) + geom_density(aes(x = step)) + facet_wrap(\"activity\")"},{"path":"/reference/simul_spat.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate spatial point process — simul_spat","title":"Simulate spatial point process — simul_spat","text":"Generates spatial point process reference map, using Inhomogeneous Poisson Point Process spatstat IPP. intensity process proportional reference map, final number individuals population provided N. Several runs can simulated time. working real environment, reference map must projected.","code":""},{"path":"/reference/simul_spat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate spatial point process — simul_spat","text":"","code":"simul_spat(   ref_map,   N,   seed = NULL,   n_sim = 1,   return_wgs_coordinates = TRUE,   drop_geometry = FALSE,   mean_group_size = NULL )"},{"path":"/reference/simul_spat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate spatial point process — simul_spat","text":"ref_map Reference map, must projected N Number individuals final population seed Numeric n_sim Number simulation run return_wgs_coordinates Boolean. function returns points WGS coordinates? Recommended working real environment drop_geometry Boolean. geometry dropped returned object? Defaults FALSE, TRUE function return data.frame sf object. mean_group_size mean group size generate mark. Set NULL mark wanted.","code":""},{"path":"/reference/simul_spat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate spatial point process — simul_spat","text":"Returns sf object","code":""},{"path":"/reference/simul_spat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate spatial point process — simul_spat","text":"","code":"grid <- create_grid() cdt <- generate_env_layer(grid = grid) #> [using unconditional Gaussian simulation] rsce <- generate_resource_layer(env_layers = cdt$rasters,                             beta = c(2, -1.5))  # issue a warning: we are in a virtual env and ref_map has no crs out <- simul_spat(ref_map = rsce$rasters, n_sim = 2,                    return_wgs_coordinates = FALSE, N = 1000, mean_group_size = 10) #> Warning: ref_map has no crs, is that voluntary? The output will have no crs.  ggplot2::ggplot(out) +   ggplot2::geom_tile(data = rsce$dataframe, ggplot2::aes(x = x, y = y, fill = suitability)) +    ggplot2::geom_sf() + ggplot2::facet_wrap(\"name\") +   viridis::scale_fill_viridis(option = \"H\")   ggplot2::ggplot(out) +    ggplot2::geom_sf(ggplot2::aes(size = size)) + ggplot2::facet_wrap(\"name\")"},{"path":"/news/index.html","id":"simtools-0009000","dir":"Changelog","previous_headings":"","what":"simtools 0.0.0.9000","title":"simtools 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
